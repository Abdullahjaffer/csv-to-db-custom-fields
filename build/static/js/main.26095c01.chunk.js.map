{"version":3,"sources":["logo.svg","pages/home.js","app/App.js","serviceWorker.js","Redux/Reducers/simpleReducer.js","Redux/Reducers/rootReducer.js","index.js","Redux/store.js"],"names":["module","exports","Home","state","fileList","uploading","result","onFinish","values","console","log","handleUpload","formData","FormData","append","fetch","method","headers","Accept","body","then","response","json","v","success","notification","message","setState","error","isArray","catch","err","props","name","multiple","showUploadList","showDownloadIcon","onRemove","file","beforeUpload","this","accept","Fragment","status","title","subTitle","id","extra","onClick","Dragger","className","InboxOutlined","style","width","React","Component","App","exact","path","component","connect","posts","simpleReducer","post","Boolean","window","location","hostname","match","initialState","combineReducers","action","type","payload","ReactDOM","render","StrictMode","store","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26095c01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport {\n    Form,\n    Select,\n    InputNumber,\n    Switch,\n    Radio,\n    Slider,\n    Button,\n    Upload,\n    Rate,\n    Checkbox,\n    Row,\n    Col,\n    message,\n    notification,\n    Result,\n} from \"antd\";\nimport { UploadOutlined, InboxOutlined } from \"@ant-design/icons\";\n\nclass Home extends React.Component {\n    state = {\n        fileList: [],\n        uploading: false,\n        result: null,\n    };\n    onFinish = (values) => {\n        console.log(values);\n    };\n\n    handleUpload = () => {\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        const formData = new FormData();\n        formData.append(\"file\", this.state.fileList[0]);\n        fetch(\"/\", {\n            method: \"post\",\n            headers: {\n                Accept: \"application/json\",\n                \"Access-Control-Allow-Origin\": \"*\",\n            },\n            body: formData,\n        })\n            .then((response) => {\n                return response.json();\n            })\n            .then((v) => {\n                console.log(v);\n                if (v.success) {\n                    notification.success({\n                        message: v.message,\n                    });\n                    this.setState({\n                        result: v,\n                    });\n                } else {\n                    notification.error({\n                        message: \"Failed to add data\",\n                    });\n                    if (!v.message.isArray()) {\n                        notification.error({\n                            message: v.message,\n                        });\n                    } else {\n                        console.log(v.message);\n                    }\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    render() {\n        const { fileList } = this.state;\n        const props = {\n            name: \"file\",\n            multiple: false,\n            showUploadList: {\n                showDownloadIcon: false,\n            },\n            onRemove: (file) => {\n                this.setState((state) => {\n                    return {\n                        fileList: [],\n                    };\n                });\n            },\n            beforeUpload: (file) => {\n                this.setState((state) => ({\n                    fileList: [file],\n                }));\n                return false;\n            },\n            fileList,\n            accept: \".xlsx\",\n        };\n        return (\n            <React.Fragment>\n                {this.state.result ? (\n                    <Result\n                        status=\"success\"\n                        title=\"Successfully Added Data!\"\n                        subTitle={`Data Id is : ${this.state.result.id}`}\n                        extra={[\n                            <Button\n                                onClick={() => {\n                                    this.setState({\n                                        result: null,\n                                        fileList: [],\n                                    });\n                                }}\n                            >\n                                Add more\n                            </Button>,\n                        ]}\n                    />\n                ) : (\n                    <React.Fragment>\n                        <Upload.Dragger {...props}>\n                            <p className=\"ant-upload-drag-icon\">\n                                <InboxOutlined />\n                            </p>\n                            <p className=\"ant-upload-text\">\n                                Click or drag file to this area to upload\n                            </p>\n                        </Upload.Dragger>\n                        <Button\n                            style={{ width: \"100%\" }}\n                            onClick={this.handleUpload}\n                        >\n                            {this.state.fileList &&\n                            this.state.fileList[0] &&\n                            this.state.fileList[0].name\n                                ? this.state.fileList[0].name\n                                : \"Click to Upload\"}\n                        </Button>\n                    </React.Fragment>\n                )}\n            </React.Fragment>\n        );\n    }\n}\nexport default Home;\n","import React from \"react\";\nimport logo from \"../logo.svg\";\nimport \"./App.css\";\nimport {\n    Route,\n    NavLink,\n    BrowserRouter as Router,\n    Switch,\n} from \"react-router-dom\";\nimport Home from \"../pages/home\";\nimport { connect } from \"react-redux\";\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route component={() => <h1>Not found</h1>} />\n                </Switch>\n            </Router>\n        );\n    }\n}\nconst mapStateToProps = (state) => ({\n    posts: state.simpleReducer.post,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    post : []\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n     case 'SIMPLE_ACTION':\n      return {\n       post: [...state.post , action.payload]\n      }\n     default:\n      return state\n    }\n   }","import { combineReducers } from 'redux';\nimport simpleReducer from './simpleReducer';\nexport default combineReducers({\n simpleReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers/rootReducer';\nexport default function configureStore(initialState={}) {\n return createStore(\n   rootReducer,\n   initialState,\n   applyMiddleware(thunk)\n );\n}"],"sourceRoot":""}