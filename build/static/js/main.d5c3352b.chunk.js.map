{"version":3,"sources":["logo.svg","pages/home.js","app/App.js","serviceWorker.js","Redux/Reducers/simpleReducer.js","Redux/Reducers/rootReducer.js","index.js","Redux/store.js"],"names":["module","exports","Home","state","fileList","uploading","result","error","onFinish","values","console","log","handleUpload","formData","FormData","append","fetch","method","headers","Accept","body","then","response","a","ok","json","Error","v","success","notification","message","setState","catch","err","JSON","stringify","Object","getOwnPropertyNames","props","name","multiple","showUploadList","showDownloadIcon","onRemove","file","beforeUpload","this","accept","Fragment","description","type","showIcon","status","title","subTitle","id","Array","isArray","map","extra","onClick","Dragger","className","InboxOutlined","style","width","React","Component","App","exact","path","component","connect","posts","simpleReducer","post","Boolean","window","location","hostname","match","initialState","combineReducers","action","payload","ReactDOM","render","StrictMode","store","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5c3352b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { InboxOutlined } from \"@ant-design/icons\";\nimport { Alert, Button, notification, Result, Upload } from \"antd\";\nimport React from \"react\";\n\nclass Home extends React.Component {\n  state = {\n    fileList: [],\n    uploading: false,\n    result: null,\n    error: null,\n  };\n  onFinish = (values) => {\n    console.log(values);\n  };\n\n  handleUpload = () => {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const formData = new FormData();\n    formData.append(\"file\", this.state.fileList[0]);\n    fetch(\"/\", {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: formData,\n    })\n      .then(async (response) => {\n        if (!response.ok) {\n          const result = await response.json();\n          console.log(result);\n          throw new Error(result.error);\n        }\n        return response.json();\n      })\n      .then((v) => {\n        console.log(v);\n        if (v.success) {\n          notification.success({\n            message: v.message,\n          });\n          this.setState({\n            result: v,\n            error: null,\n          });\n        } else {\n          notification.error({\n            message: \"Failed to add data\",\n          });\n          this.setState({\n            result: v,\n            error: null,\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        this.setState({\n          error: JSON.stringify(err, Object.getOwnPropertyNames(err)),\n        });\n      });\n  };\n\n  render() {\n    const { fileList } = this.state;\n    const props = {\n      name: \"file\",\n      multiple: false,\n      showUploadList: {\n        showDownloadIcon: false,\n      },\n      onRemove: (file) => {\n        this.setState((state) => {\n          return {\n            fileList: [],\n          };\n        });\n      },\n      beforeUpload: (file) => {\n        this.setState((state) => ({\n          fileList: [file],\n        }));\n        return false;\n      },\n      fileList,\n      accept: \".xlsx\",\n    };\n    return (\n      <React.Fragment>\n        {this.state.error && (\n          <Alert\n            message=\"Error\"\n            description={JSON.stringify(this.state.error)}\n            type=\"error\"\n            showIcon\n          />\n        )}\n        {this.state.result ? (\n          <Result\n            status={this.state.result.success ? \"success\" : \"error\"}\n            title={\n              this.state.result.success\n                ? \"Successfully Added Data!\"\n                : \"Upload sheet contains errors\"\n            }\n            subTitle={\n              this.state.result.success ? (\n                `Data Id is : ${this.state.result.id}`\n              ) : Array.isArray(this.state.result.message) ? (\n                this.state.result.message.map((v) => <div>{v}</div>)\n              ) : typeof this.state.result.message === \"object\" &&\n                this.state.result.message !== null ? (\n                <div>{JSON.stringify(this.state.result.message)}</div>\n              ) : (\n                <div>{this.state.result.message}</div>\n              )\n            }\n            extra={[\n              <Button\n                onClick={() => {\n                  this.setState({\n                    result: null,\n                    fileList: [],\n                  });\n                }}\n              >\n                {this.state.result.success ? \"Add more\" : \"Try again\"}\n              </Button>,\n            ]}\n          />\n        ) : (\n          <React.Fragment>\n            <Upload.Dragger {...props}>\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">\n                Click or drag file to this area to upload\n              </p>\n            </Upload.Dragger>\n            <Button style={{ width: \"100%\" }} onClick={this.handleUpload}>\n              {this.state.fileList &&\n              this.state.fileList[0] &&\n              this.state.fileList[0].name\n                ? this.state.fileList[0].name\n                : \"Click to Upload\"}\n            </Button>\n          </React.Fragment>\n        )}\n      </React.Fragment>\n    );\n  }\n}\nexport default Home;\n","import React from \"react\";\nimport logo from \"../logo.svg\";\nimport \"./App.css\";\nimport {\n    Route,\n    NavLink,\n    BrowserRouter as Router,\n    Switch,\n} from \"react-router-dom\";\nimport Home from \"../pages/home\";\nimport { connect } from \"react-redux\";\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route component={() => <h1>Not found</h1>} />\n                </Switch>\n            </Router>\n        );\n    }\n}\nconst mapStateToProps = (state) => ({\n    posts: state.simpleReducer.post,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    post : []\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n     case 'SIMPLE_ACTION':\n      return {\n       post: [...state.post , action.payload]\n      }\n     default:\n      return state\n    }\n   }","import { combineReducers } from 'redux';\nimport simpleReducer from './simpleReducer';\nexport default combineReducers({\n simpleReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers/rootReducer';\nexport default function configureStore(initialState={}) {\n return createStore(\n   rootReducer,\n   initialState,\n   applyMiddleware(thunk)\n );\n}"],"sourceRoot":""}